syntax = "proto3";
package sentinel.node.v3;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "sentinel/node/v3/lease.proto";
import "sentinel/node/v3/params.proto";

option go_package = "github.com/sentinel-official/hub/v12/x/node/types/v3";
option (gogoproto.equal_all) = false;
option (gogoproto.goproto_getters_all) = false;

message QueryLeaseRequest {
  uint64 id = 1 [(gogoproto.customname) = "ID"];
}

message QueryLeasesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryLeasesForNodeRequest {
  string address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryLeasesForProviderRequest {
  string address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryParamsRequest {}

message QueryLeaseResponse {
  sentinel.node.v3.Lease lease = 1 [(gogoproto.nullable) = false];
}

message QueryLeasesResponse {
  repeated sentinel.node.v3.Lease leases = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryLeasesForNodeResponse {
  repeated sentinel.node.v3.Lease leases = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryLeasesForProviderResponse {
  repeated sentinel.node.v3.Lease leases = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

service QueryService {
  rpc QueryLease(QueryLeaseRequest) returns (QueryLeaseResponse) {
    option (google.api.http).get = "/sentinel/node/v3/leases/{id}";
  }

  rpc QueryLeases(QueryLeasesRequest) returns (QueryLeasesResponse) {
    option (google.api.http).get = "/sentinel/node/v3/leases";
  }

  rpc QueryLeasesForProvider(QueryLeasesForProviderRequest) returns (QueryLeasesForProviderResponse) {
    option (google.api.http).get = "/sentinel/node/v3/providers/{address}/leases";
  }

  rpc QueryLeasesForNode(QueryLeasesForNodeRequest) returns (QueryLeasesForNodeResponse) {
    option (google.api.http).get = "/sentinel/node/v3/nodes/{address}/leases";
  }

  rpc QueryParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sentinel/node/v3/params";
  }
}
