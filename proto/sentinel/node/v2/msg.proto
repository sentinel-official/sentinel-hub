syntax = "proto3";
package sentinel.node.v2;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "sentinel/types/v1/status.proto";

option go_package = "github.com/sentinel-official/hub/v12/x/node/types/v2";
option (gogoproto.equal_all) = false;
option (gogoproto.goproto_getters_all) = false;

message MsgRegisterRequest {
  string from = 1;
  repeated cosmos.base.v1beta1.Coin gigabyte_prices = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin hourly_prices = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string remote_url = 4 [(gogoproto.customname) = "RemoteURL"];
}

message MsgUpdateDetailsRequest {
  string from = 1;
  repeated cosmos.base.v1beta1.Coin gigabyte_prices = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin hourly_prices = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string remote_url = 4 [(gogoproto.customname) = "RemoteURL"];
}

message MsgUpdateStatusRequest {
  string from = 1;
  sentinel.types.v1.Status status = 2;
}

message MsgSubscribeRequest {
  string from = 1;
  string node_address = 2;
  int64 gigabytes = 3;
  int64 hours = 4;
  string denom = 5;
}

message MsgRegisterResponse {}

message MsgUpdateDetailsResponse {}

message MsgUpdateStatusResponse {}

message MsgSubscribeResponse {}

service MsgService {
  rpc MsgRegister(MsgRegisterRequest) returns (MsgRegisterResponse);
  rpc MsgUpdateDetails(MsgUpdateDetailsRequest) returns (MsgUpdateDetailsResponse);
  rpc MsgUpdateStatus(MsgUpdateStatusRequest) returns (MsgUpdateStatusResponse);
  rpc MsgSubscribe(MsgSubscribeRequest) returns (MsgSubscribeResponse);
}
