syntax = "proto3";
package sentinel.subscription.v2;

import "gogoproto/gogo.proto";
import "sentinel/types/v1/status.proto";

option go_package = "github.com/sentinel-official/hub/v12/x/subscription/types/v2";
option (gogoproto.equal_all) = false;
option (gogoproto.goproto_getters_all) = false;

// EventUpdateStatus represents an update to the status of an event.
message EventUpdateStatus {
  // Field 1: Status of the event.
  sentinel.types.v1.Status status = 1 [(gogoproto.moretags) = "yaml:\"status\""];

  // Field 2: Address associated with the event.
  string address = 2 [(gogoproto.moretags) = "yaml:\"address\""];

  // Field 3: Unique identifier for the event.
  uint64 id = 3 [
    (gogoproto.customname) = "ID",
    (gogoproto.moretags) = "yaml:\"id\""
  ];

  // Field 4: Unique identifier for the associated plan.
  uint64 plan_id = 4 [
    (gogoproto.customname) = "PlanID",
    (gogoproto.moretags) = "yaml:\"plan_id\""
  ];
}

// EventAllocate represents an allocation event.
message EventAllocate {
  // Field 1: Address associated with the allocation.
  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];

  // Field 2: Granted bytes in the allocation.
  string granted_bytes = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // Field 3: Utilized bytes in the allocation.
  string utilised_bytes = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // Field 4: Unique identifier for the allocation.
  uint64 id = 4 [
    (gogoproto.customname) = "ID",
    (gogoproto.moretags) = "yaml:\"id\""
  ];
}

// EventCreatePayout represents an event for creating a payout.
message EventCreatePayout {
  // Field 1: Address associated with the payout.
  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];

  // Field 2: Node address associated with the payout.
  string node_address = 2 [(gogoproto.moretags) = "yaml:\"node_address\""];

  // Field 3: Unique identifier for the payout.
  uint64 id = 3 [
    (gogoproto.customname) = "ID",
    (gogoproto.moretags) = "yaml:\"id\""
  ];
}

// EventPayForPayout represents an event for paying for a payout.
message EventPayForPayout {
  // Field 1: Address associated with the payout payment.
  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];

  // Field 2: Node address associated with the payout payment.
  string node_address = 2 [(gogoproto.moretags) = "yaml:\"node_address\""];

  // Field 3: Payment amount for the payout.
  string payment = 3 [(gogoproto.moretags) = "yaml:\"payment\""];

  // Field 4: Staking reward associated with the payout.
  string staking_reward = 4 [(gogoproto.moretags) = "yaml:\"staking_reward\""];

  // Field 5: Unique identifier for the payout.
  uint64 id = 5 [
    (gogoproto.customname) = "ID",
    (gogoproto.moretags) = "yaml:\"id\""
  ];
}

// EventPayForPlan represents an event for paying for a plan.
message EventPayForPlan {
  // Field 1: Address associated with the plan payment.
  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];

  // Field 2: Payment amount for the plan.
  string payment = 2 [(gogoproto.moretags) = "yaml:\"payment\""];

  // Field 3: Provider address associated with the plan payment.
  string provider_address = 3 [(gogoproto.moretags) = "yaml:\"provider_address\""];

  // Field 4: Staking reward associated with the plan.
  string staking_reward = 4 [(gogoproto.moretags) = "yaml:\"staking_reward\""];

  // Field 5: Unique identifier for the plan.
  uint64 id = 5 [
    (gogoproto.customname) = "ID",
    (gogoproto.moretags) = "yaml:\"id\""
  ];
}

// EventPayForSession represents an event for paying for a session.
message EventPayForSession {
  // Field 1: Address associated with the session payment.
  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];

  // Field 2: Node address associated with the session payment.
  string node_address = 2 [(gogoproto.moretags) = "yaml:\"node_address\""];

  // Field 3: Payment amount for the session.
  string payment = 3 [(gogoproto.moretags) = "yaml:\"payment\""];

  // Field 4: Staking reward associated with the session.
  string staking_reward = 4 [(gogoproto.moretags) = "yaml:\"staking_reward\""];

  // Field 5: Unique identifier for the session.
  uint64 session_id = 5 [
    (gogoproto.customname) = "SessionID",
    (gogoproto.moretags) = "yaml:\"session_id\""
  ];

  // Field 6: Unique identifier for the subscription.
  uint64 subscription_id = 6 [
    (gogoproto.customname) = "SubscriptionID",
    (gogoproto.moretags) = "yaml:\"subscription_id\""
  ];
}

// EventRefund represents an event for processing a refund.
message EventRefund {
  // Field 1: Address associated with the refund.
  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];

  // Field 2: Amount to be refunded.
  string amount = 2 [(gogoproto.moretags) = "yaml:\"amount\""];

  // Field 3: Unique identifier for the refund.
  uint64 id = 3 [
    (gogoproto.customname) = "ID",
    (gogoproto.moretags) = "yaml:\"id\""
  ];
}
