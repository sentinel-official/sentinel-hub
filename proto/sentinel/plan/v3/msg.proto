syntax = "proto3";
package sentinel.plan.v3;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "sentinel/types/v1/status.proto";

option go_package = "github.com/sentinel-official/hub/v12/x/plan/types/v3";
option (gogoproto.equal_all) = false;
option (gogoproto.goproto_getters_all) = false;

message MsgCreatePlanRequest {
  string from = 1;
  google.protobuf.Duration duration = 2 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false
  ];
  int64 gigabytes = 3;
  repeated cosmos.base.v1beta1.Coin prices = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgLinkNodeRequest {
  string from = 1;
  uint64 id = 2 [(gogoproto.customname) = "ID"];
  string node_address = 3;
}

message MsgUnlinkNodeRequest {
  string from = 1;
  uint64 id = 2 [(gogoproto.customname) = "ID"];
  string node_address = 3;
}

message MsgUpdatePlanStatusRequest {
  string from = 1;
  uint64 id = 2 [(gogoproto.customname) = "ID"];
  sentinel.types.v1.Status status = 3;
}

message MsgStartSessionRequest {
  string from = 1;
  uint64 id = 2 [(gogoproto.customname) = "ID"];
  string denom = 3;
  bool renewable = 4;
  string node_address = 5;
}

message MsgStartSubscriptionRequest {
  string from = 1;
  uint64 id = 2 [(gogoproto.customname) = "ID"];
  string denom = 3;
  bool renewable = 4;
}

message MsgCreatePlanResponse {
  uint64 id = 1 [(gogoproto.customname) = "ID"];
}

message MsgLinkNodeResponse {}
message MsgUnlinkNodeResponse {}
message MsgUpdatePlanStatusResponse {}

message MsgStartSessionResponse {
  uint64 id = 1 [(gogoproto.customname) = "ID"];
}

message MsgStartSubscriptionResponse {
  uint64 id = 1 [(gogoproto.customname) = "ID"];
}

service MsgService {
  rpc MsgCreatePlan(MsgCreatePlanRequest) returns (MsgCreatePlanResponse);
  rpc MsgLinkNode(MsgLinkNodeRequest) returns (MsgLinkNodeResponse);
  rpc MsgUnlinkNode(MsgUnlinkNodeRequest) returns (MsgUnlinkNodeResponse);
  rpc MsgUpdatePlanStatus(MsgUpdatePlanStatusRequest) returns (MsgUpdatePlanStatusResponse);
  rpc MsgStartSession(MsgStartSessionRequest) returns (MsgStartSessionResponse);
  rpc MsgStartSubscription(MsgStartSubscriptionRequest) returns (MsgStartSubscriptionResponse);
}
