// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sentinel/lease/v1/lease.proto

package v1

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Lease struct {
	ID          uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProvAddress string     `protobuf:"bytes,2,opt,name=prov_address,json=provAddress,proto3" json:"prov_address,omitempty"`
	NodeAddress string     `protobuf:"bytes,3,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	Price       types.Coin `protobuf:"bytes,4,opt,name=price,proto3" json:"price"`
	Deposit     types.Coin `protobuf:"bytes,5,opt,name=deposit,proto3" json:"deposit"`
	Hours       int64      `protobuf:"varint,6,opt,name=hours,proto3" json:"hours,omitempty"`
	MaxHours    int64      `protobuf:"varint,7,opt,name=max_hours,json=maxHours,proto3" json:"max_hours,omitempty"`
	Renewable   bool       `protobuf:"varint,8,opt,name=renewable,proto3" json:"renewable,omitempty"`
	InactiveAt  time.Time  `protobuf:"bytes,9,opt,name=inactive_at,json=inactiveAt,proto3,stdtime" json:"inactive_at"`
	PayoutAt    time.Time  `protobuf:"bytes,10,opt,name=payout_at,json=payoutAt,proto3,stdtime" json:"payout_at"`
}

func (m *Lease) Reset()         { *m = Lease{} }
func (m *Lease) String() string { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()    {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_4669ec4defd1a2d7, []int{0}
}
func (m *Lease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(m, src)
}
func (m *Lease) XXX_Size() int {
	return m.Size()
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Lease)(nil), "sentinel.lease.v1.Lease")
}

func init() { proto.RegisterFile("sentinel/lease/v1/lease.proto", fileDescriptor_4669ec4defd1a2d7) }

var fileDescriptor_4669ec4defd1a2d7 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0xf9, 0x77, 0xf6, 0x86, 0x06, 0xeb, 0x84, 0x4c, 0x80, 0x8d, 0xa1, 0x72, 0xc3,
	0xae, 0x72, 0xe8, 0x0a, 0xca, 0x04, 0x90, 0x40, 0xa2, 0xb2, 0x90, 0x90, 0x68, 0xa2, 0xb5, 0xbd,
	0x71, 0x56, 0xb2, 0x3d, 0x96, 0x77, 0x6d, 0x72, 0x6f, 0x71, 0x8f, 0x41, 0xcd, 0x53, 0xa4, 0xbc,
	0x92, 0xea, 0x00, 0xe7, 0x45, 0x90, 0xbd, 0x67, 0x68, 0xb9, 0x6e, 0xf6, 0x9b, 0xdf, 0x37, 0x3b,
	0x33, 0x1a, 0xfc, 0x4c, 0x89, 0x42, 0xcb, 0x42, 0x64, 0x2c, 0x13, 0x5c, 0x09, 0xd6, 0xac, 0x4c,
	0x40, 0xcb, 0x0a, 0x34, 0xb8, 0x0f, 0x87, 0x34, 0x35, 0x6a, 0xb3, 0x5a, 0x90, 0x18, 0x54, 0x0e,
	0x8a, 0x45, 0x06, 0x8f, 0x84, 0xe6, 0x2b, 0x16, 0x83, 0x2c, 0x8c, 0x65, 0x71, 0x9e, 0x42, 0x0a,
	0x7d, 0xc8, 0xba, 0xe8, 0x4e, 0x5d, 0xa6, 0x00, 0x69, 0x26, 0x58, 0xff, 0x8a, 0xea, 0x1d, 0xd3,
	0x32, 0x17, 0x4a, 0xf3, 0xbc, 0x34, 0xc0, 0x8b, 0xef, 0x63, 0x3c, 0xfd, 0xd8, 0xfd, 0xe1, 0x3e,
	0xc2, 0x23, 0x99, 0x78, 0xc8, 0x47, 0xc1, 0x64, 0x33, 0x6b, 0x6f, 0x97, 0xa3, 0x0f, 0x6f, 0xc3,
	0x91, 0x4c, 0xdc, 0xe7, 0xf8, 0x41, 0x59, 0x41, 0xb3, 0xe5, 0x49, 0x52, 0x09, 0xa5, 0xbc, 0x91,
	0x8f, 0x02, 0x27, 0x9c, 0x77, 0xda, 0xda, 0x48, 0x1d, 0x52, 0x40, 0x22, 0xfe, 0x22, 0x63, 0x83,
	0x74, 0xda, 0x80, 0x5c, 0xe2, 0x69, 0x59, 0xc9, 0x58, 0x78, 0x13, 0x1f, 0x05, 0xf3, 0x8b, 0xc7,
	0xd4, 0x8c, 0x43, 0x23, 0x33, 0x5e, 0x3f, 0x0e, 0x7d, 0x03, 0xb2, 0xd8, 0x4c, 0x8e, 0xb7, 0x4b,
	0x2b, 0x34, 0xb4, 0xfb, 0x1a, 0x9f, 0x25, 0xa2, 0x04, 0x25, 0xb5, 0x37, 0xfd, 0x3f, 0xe3, 0xc0,
	0xbb, 0xe7, 0x78, 0xba, 0x87, 0xba, 0x52, 0xde, 0xcc, 0x47, 0xc1, 0x38, 0x34, 0x0f, 0xf7, 0x09,
	0x76, 0x72, 0x7e, 0xd8, 0x9a, 0xcc, 0x59, 0x9f, 0xb1, 0x73, 0x7e, 0x78, 0xdf, 0x27, 0x9f, 0x62,
	0xa7, 0x12, 0x85, 0xf8, 0xca, 0xa3, 0x4c, 0x78, 0xb6, 0x8f, 0x02, 0x3b, 0xfc, 0x27, 0xb8, 0xef,
	0xf0, 0x5c, 0x16, 0x3c, 0xd6, 0xb2, 0x11, 0x5b, 0xae, 0x3d, 0xa7, 0xef, 0x67, 0x41, 0xcd, 0x86,
	0xe9, 0xb0, 0x61, 0xfa, 0x69, 0xd8, 0xf0, 0xc6, 0xee, 0x1a, 0xba, 0xfe, 0xb9, 0x44, 0x21, 0x1e,
	0x8c, 0x6b, 0xed, 0xae, 0xb1, 0x53, 0xf2, 0x2b, 0xa8, 0x75, 0x57, 0x04, 0xdf, 0xa3, 0x88, 0x6d,
	0x6c, 0x6b, 0xbd, 0xf9, 0x7c, 0xfc, 0x4d, 0xac, 0x6f, 0x2d, 0xb1, 0x8e, 0x2d, 0x41, 0x37, 0x2d,
	0x41, 0xbf, 0x5a, 0x82, 0xae, 0x4f, 0xc4, 0xba, 0x39, 0x11, 0xeb, 0xc7, 0x89, 0x58, 0x5f, 0x2e,
	0x53, 0xa9, 0xf7, 0x75, 0x44, 0x63, 0xc8, 0xd9, 0x70, 0x4b, 0x2f, 0x61, 0xb7, 0x93, 0xb1, 0xe4,
	0x19, 0xdb, 0xd7, 0x11, 0x6b, 0x56, 0x17, 0xec, 0x70, 0x77, 0x7d, 0xfa, 0xaa, 0x14, 0xaa, 0x3b,
	0xaa, 0x59, 0xdf, 0xc0, 0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x90, 0x13, 0x06, 0x9f,
	0x02, 0x00, 0x00,
}

func (m *Lease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PayoutAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PayoutAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLease(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.InactiveAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.InactiveAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLease(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	if m.Renewable {
		i--
		if m.Renewable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.MaxHours != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.MaxHours))
		i--
		dAtA[i] = 0x38
	}
	if m.Hours != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.Hours))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLease(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLease(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintLease(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProvAddress) > 0 {
		i -= len(m.ProvAddress)
		copy(dAtA[i:], m.ProvAddress)
		i = encodeVarintLease(dAtA, i, uint64(len(m.ProvAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLease(dAtA []byte, offset int, v uint64) int {
	offset -= sovLease(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Lease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLease(uint64(m.ID))
	}
	l = len(m.ProvAddress)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovLease(uint64(l))
	l = m.Deposit.Size()
	n += 1 + l + sovLease(uint64(l))
	if m.Hours != 0 {
		n += 1 + sovLease(uint64(m.Hours))
	}
	if m.MaxHours != 0 {
		n += 1 + sovLease(uint64(m.MaxHours))
	}
	if m.Renewable {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.InactiveAt)
	n += 1 + l + sovLease(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PayoutAt)
	n += 1 + l + sovLease(uint64(l))
	return n
}

func sovLease(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLease(x uint64) (n int) {
	return sovLease(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLease
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hours", wireType)
			}
			m.Hours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hours |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHours", wireType)
			}
			m.MaxHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHours |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Renewable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Renewable = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.InactiveAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PayoutAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLease(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLease
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLease(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLease
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLease
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLease
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLease
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLease        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLease          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLease = fmt.Errorf("proto: unexpected end of group")
)
