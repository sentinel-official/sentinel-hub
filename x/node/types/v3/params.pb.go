// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sentinel/node/v3/params.proto

package v3

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	Deposit             types.Coin                                  `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit"`
	ActiveDuration      time.Duration                               `protobuf:"bytes,2,opt,name=active_duration,json=activeDuration,proto3,stdduration" json:"active_duration"`
	MinGigabytePrices   github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=min_gigabyte_prices,json=minGigabytePrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"min_gigabyte_prices"`
	MinHourlyPrices     github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=min_hourly_prices,json=minHourlyPrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"min_hourly_prices"`
	MaxSessionGigabytes int64                                       `protobuf:"varint,5,opt,name=max_session_gigabytes,json=maxSessionGigabytes,proto3" json:"max_session_gigabytes,omitempty"`
	MinSessionGigabytes int64                                       `protobuf:"varint,6,opt,name=min_session_gigabytes,json=minSessionGigabytes,proto3" json:"min_session_gigabytes,omitempty"`
	MaxSessionHours     int64                                       `protobuf:"varint,7,opt,name=max_session_hours,json=maxSessionHours,proto3" json:"max_session_hours,omitempty"`
	MinSessionHours     int64                                       `protobuf:"varint,8,opt,name=min_session_hours,json=minSessionHours,proto3" json:"min_session_hours,omitempty"`
	StakingShare        cosmossdk_io_math.LegacyDec                 `protobuf:"bytes,9,opt,name=staking_share,json=stakingShare,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"staking_share"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc24098d3255287, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "sentinel.node.v3.Params")
}

func init() { proto.RegisterFile("sentinel/node/v3/params.proto", fileDescriptor_bbc24098d3255287) }

var fileDescriptor_bbc24098d3255287 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x1c, 0xc5, 0x6d, 0xda, 0xa6, 0xad, 0x0b, 0x84, 0xa6, 0x20, 0x99, 0x02, 0x97, 0x08, 0x96, 0x08,
	0xd4, 0x3b, 0x25, 0x66, 0x61, 0x0d, 0x91, 0xe8, 0xd0, 0xa1, 0x72, 0x25, 0x06, 0x16, 0xeb, 0x6c,
	0x5f, 0xec, 0x53, 0xe2, 0x3b, 0xcb, 0x77, 0xb6, 0x92, 0x81, 0x81, 0x6f, 0xc0, 0xc8, 0xc4, 0x8c,
	0xf8, 0x24, 0x19, 0x3b, 0x22, 0x86, 0x16, 0x92, 0x2f, 0x82, 0xce, 0x77, 0xa6, 0x91, 0xe8, 0xca,
	0x94, 0xcb, 0xfd, 0xdf, 0xfb, 0xff, 0x5e, 0x9e, 0x72, 0xce, 0x33, 0x41, 0x98, 0xa4, 0x8c, 0xcc,
	0x10, 0xe3, 0x31, 0x41, 0x95, 0x87, 0x72, 0x5c, 0xe0, 0x4c, 0xc0, 0xbc, 0xe0, 0x92, 0x77, 0x1e,
	0x34, 0x63, 0xa8, 0xc6, 0xb0, 0xf2, 0x8e, 0x41, 0xc4, 0x45, 0xc6, 0x05, 0x0a, 0xb1, 0x20, 0xa8,
	0x1a, 0x84, 0x44, 0xe2, 0x01, 0x8a, 0x38, 0x65, 0xda, 0x71, 0xfc, 0x30, 0xe1, 0x09, 0xaf, 0x8f,
	0x48, 0x9d, 0xcc, 0x2d, 0x48, 0x38, 0x4f, 0x66, 0x04, 0xd5, 0xdf, 0xc2, 0x72, 0x82, 0xe2, 0xb2,
	0xc0, 0x92, 0x72, 0xe3, 0x7a, 0xfe, 0x75, 0xc7, 0x69, 0x9d, 0xd7, 0xe0, 0xce, 0x1b, 0x67, 0x37,
	0x26, 0x39, 0x17, 0x54, 0xba, 0x76, 0xcf, 0xee, 0x1f, 0x0c, 0x1f, 0x43, 0x8d, 0x84, 0x0a, 0x09,
	0x0d, 0x12, 0xbe, 0xe5, 0x94, 0x8d, 0xb6, 0x97, 0x57, 0x5d, 0xcb, 0x6f, 0xf4, 0x9d, 0x33, 0xa7,
	0x8d, 0x23, 0x49, 0x2b, 0x12, 0x34, 0xeb, 0xdd, 0x3b, 0x66, 0x85, 0xe6, 0xc3, 0x86, 0x0f, 0xc7,
	0x46, 0x30, 0xda, 0x53, 0x2b, 0xbe, 0x5c, 0x77, 0x6d, 0xff, 0xbe, 0xf6, 0x36, 0x93, 0xce, 0x27,
	0xdb, 0x39, 0xca, 0x28, 0x0b, 0x12, 0x9a, 0xe0, 0x70, 0x21, 0x49, 0x90, 0x17, 0x34, 0x22, 0xc2,
	0xdd, 0xea, 0x6d, 0xf5, 0x0f, 0x86, 0x4f, 0x6f, 0x4d, 0x35, 0x26, 0x51, 0x1d, 0xcc, 0x53, 0x5b,
	0xbf, 0x5f, 0x77, 0x5f, 0x25, 0x54, 0xa6, 0x65, 0x08, 0x23, 0x9e, 0x21, 0x53, 0x9c, 0xfe, 0x38,
	0x11, 0xf1, 0x14, 0xc9, 0x45, 0x4e, 0x44, 0xe3, 0x11, 0xfe, 0x61, 0x46, 0xd9, 0x3b, 0x03, 0x3b,
	0xaf, 0x59, 0x9d, 0x8f, 0x8e, 0xba, 0x0c, 0x52, 0x5e, 0x16, 0xb3, 0x45, 0x13, 0x60, 0xfb, 0x7f,
	0x05, 0x68, 0x67, 0x94, 0x9d, 0xd6, 0x28, 0x83, 0x1f, 0x3a, 0x8f, 0x32, 0x3c, 0x0f, 0x04, 0x11,
	0x82, 0xf2, 0x9b, 0x26, 0x84, 0xbb, 0xd3, 0xb3, 0xfb, 0x5b, 0xfe, 0x51, 0x86, 0xe7, 0x17, 0x7a,
	0xd6, 0xe4, 0xd6, 0x1e, 0xca, 0x6e, 0xf1, 0xb4, 0x8c, 0x87, 0xb2, 0x7f, 0x3c, 0x2f, 0x9d, 0xc3,
	0x4d, 0x8e, 0xfa, 0xb9, 0xc2, 0xdd, 0xad, 0xf5, 0xed, 0x1b, 0x86, 0x8a, 0xa6, 0xb5, 0x1b, 0xfb,
	0xb5, 0x76, 0xcf, 0x68, 0xff, 0xee, 0xd6, 0xda, 0x53, 0xe7, 0x9e, 0x90, 0x78, 0x4a, 0x59, 0x12,
	0x88, 0x14, 0x17, 0xc4, 0xdd, 0xef, 0xd9, 0xfd, 0xfd, 0xd1, 0x0b, 0x55, 0xce, 0xcf, 0xab, 0xee,
	0x13, 0x5d, 0x85, 0x88, 0xa7, 0x90, 0x72, 0x94, 0x61, 0x99, 0xc2, 0x33, 0x92, 0xe0, 0x68, 0x31,
	0x26, 0x91, 0x7f, 0xd7, 0x38, 0x2f, 0x94, 0x71, 0xf4, 0x7e, 0xf9, 0x1b, 0x58, 0xdf, 0x56, 0xc0,
	0x5a, 0xae, 0x80, 0x7d, 0xb9, 0x02, 0xf6, 0xaf, 0x15, 0xb0, 0x3f, 0xaf, 0x81, 0x75, 0xb9, 0x06,
	0xd6, 0x8f, 0x35, 0xb0, 0x3e, 0xbc, 0xde, 0x68, 0xba, 0x79, 0x35, 0x27, 0x7c, 0x32, 0xa1, 0x11,
	0xc5, 0x33, 0x94, 0x96, 0x21, 0xaa, 0x06, 0x43, 0x34, 0xd7, 0xef, 0xac, 0x2e, 0x1e, 0x55, 0x5e,
	0xd8, 0xaa, 0xff, 0x91, 0xde, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0xe7, 0x0d, 0xfd, 0x88,
	0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.StakingShare.Size()
		i -= size
		if _, err := m.StakingShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.MinSessionHours != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinSessionHours))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxSessionHours != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSessionHours))
		i--
		dAtA[i] = 0x38
	}
	if m.MinSessionGigabytes != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinSessionGigabytes))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxSessionGigabytes != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSessionGigabytes))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MinHourlyPrices) > 0 {
		for iNdEx := len(m.MinHourlyPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinHourlyPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MinGigabytePrices) > 0 {
		for iNdEx := len(m.MinGigabytePrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinGigabytePrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.ActiveDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ActiveDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deposit.Size()
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ActiveDuration)
	n += 1 + l + sovParams(uint64(l))
	if len(m.MinGigabytePrices) > 0 {
		for _, e := range m.MinGigabytePrices {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.MinHourlyPrices) > 0 {
		for _, e := range m.MinHourlyPrices {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.MaxSessionGigabytes != 0 {
		n += 1 + sovParams(uint64(m.MaxSessionGigabytes))
	}
	if m.MinSessionGigabytes != 0 {
		n += 1 + sovParams(uint64(m.MinSessionGigabytes))
	}
	if m.MaxSessionHours != 0 {
		n += 1 + sovParams(uint64(m.MaxSessionHours))
	}
	if m.MinSessionHours != 0 {
		n += 1 + sovParams(uint64(m.MinSessionHours))
	}
	l = m.StakingShare.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.ActiveDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGigabytePrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinGigabytePrices = append(m.MinGigabytePrices, types.DecCoin{})
			if err := m.MinGigabytePrices[len(m.MinGigabytePrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinHourlyPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinHourlyPrices = append(m.MinHourlyPrices, types.DecCoin{})
			if err := m.MinHourlyPrices[len(m.MinHourlyPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSessionGigabytes", wireType)
			}
			m.MaxSessionGigabytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSessionGigabytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSessionGigabytes", wireType)
			}
			m.MinSessionGigabytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSessionGigabytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSessionHours", wireType)
			}
			m.MaxSessionHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSessionHours |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSessionHours", wireType)
			}
			m.MinSessionHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSessionHours |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
