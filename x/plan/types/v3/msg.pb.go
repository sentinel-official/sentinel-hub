// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sentinel/plan/v3/msg.proto

package v3

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	v1 "github.com/sentinel-official/hub/v12/types/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreatePlanRequest struct {
	From      string                                   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Duration  time.Duration                            `protobuf:"bytes,2,opt,name=duration,proto3,stdduration" json:"duration"`
	Gigabytes int64                                    `protobuf:"varint,3,opt,name=gigabytes,proto3" json:"gigabytes,omitempty"`
	Prices    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=prices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"prices"`
}

func (m *MsgCreatePlanRequest) Reset()         { *m = MsgCreatePlanRequest{} }
func (m *MsgCreatePlanRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePlanRequest) ProtoMessage()    {}
func (*MsgCreatePlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{0}
}
func (m *MsgCreatePlanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePlanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePlanRequest.Merge(m, src)
}
func (m *MsgCreatePlanRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePlanRequest proto.InternalMessageInfo

type MsgLinkNodeRequest struct {
	From        string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ID          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	NodeAddress string `protobuf:"bytes,3,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
}

func (m *MsgLinkNodeRequest) Reset()         { *m = MsgLinkNodeRequest{} }
func (m *MsgLinkNodeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgLinkNodeRequest) ProtoMessage()    {}
func (*MsgLinkNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{1}
}
func (m *MsgLinkNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLinkNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLinkNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLinkNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLinkNodeRequest.Merge(m, src)
}
func (m *MsgLinkNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgLinkNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLinkNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLinkNodeRequest proto.InternalMessageInfo

type MsgUnlinkNodeRequest struct {
	From        string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ID          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	NodeAddress string `protobuf:"bytes,3,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
}

func (m *MsgUnlinkNodeRequest) Reset()         { *m = MsgUnlinkNodeRequest{} }
func (m *MsgUnlinkNodeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUnlinkNodeRequest) ProtoMessage()    {}
func (*MsgUnlinkNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{2}
}
func (m *MsgUnlinkNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlinkNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlinkNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlinkNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlinkNodeRequest.Merge(m, src)
}
func (m *MsgUnlinkNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlinkNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlinkNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlinkNodeRequest proto.InternalMessageInfo

type MsgUpdatePlanStatusRequest struct {
	From   string    `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ID     uint64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Status v1.Status `protobuf:"varint,3,opt,name=status,proto3,enum=sentinel.types.v1.Status" json:"status,omitempty"`
}

func (m *MsgUpdatePlanStatusRequest) Reset()         { *m = MsgUpdatePlanStatusRequest{} }
func (m *MsgUpdatePlanStatusRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePlanStatusRequest) ProtoMessage()    {}
func (*MsgUpdatePlanStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{3}
}
func (m *MsgUpdatePlanStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePlanStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePlanStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePlanStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePlanStatusRequest.Merge(m, src)
}
func (m *MsgUpdatePlanStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePlanStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePlanStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePlanStatusRequest proto.InternalMessageInfo

type MsgStartSessionRequest struct {
	From        string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ID          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Denom       string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Renewable   bool   `protobuf:"varint,4,opt,name=renewable,proto3" json:"renewable,omitempty"`
	NodeAddress string `protobuf:"bytes,5,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
}

func (m *MsgStartSessionRequest) Reset()         { *m = MsgStartSessionRequest{} }
func (m *MsgStartSessionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgStartSessionRequest) ProtoMessage()    {}
func (*MsgStartSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{4}
}
func (m *MsgStartSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartSessionRequest.Merge(m, src)
}
func (m *MsgStartSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartSessionRequest proto.InternalMessageInfo

type MsgStartSubscriptionRequest struct {
	From      string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ID        uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Denom     string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Renewable bool   `protobuf:"varint,4,opt,name=renewable,proto3" json:"renewable,omitempty"`
}

func (m *MsgStartSubscriptionRequest) Reset()         { *m = MsgStartSubscriptionRequest{} }
func (m *MsgStartSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgStartSubscriptionRequest) ProtoMessage()    {}
func (*MsgStartSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{5}
}
func (m *MsgStartSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartSubscriptionRequest.Merge(m, src)
}
func (m *MsgStartSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartSubscriptionRequest proto.InternalMessageInfo

type MsgCreatePlanResponse struct {
	ID uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreatePlanResponse) Reset()         { *m = MsgCreatePlanResponse{} }
func (m *MsgCreatePlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePlanResponse) ProtoMessage()    {}
func (*MsgCreatePlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{6}
}
func (m *MsgCreatePlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePlanResponse.Merge(m, src)
}
func (m *MsgCreatePlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePlanResponse proto.InternalMessageInfo

type MsgLinkNodeResponse struct {
}

func (m *MsgLinkNodeResponse) Reset()         { *m = MsgLinkNodeResponse{} }
func (m *MsgLinkNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLinkNodeResponse) ProtoMessage()    {}
func (*MsgLinkNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{7}
}
func (m *MsgLinkNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLinkNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLinkNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLinkNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLinkNodeResponse.Merge(m, src)
}
func (m *MsgLinkNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLinkNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLinkNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLinkNodeResponse proto.InternalMessageInfo

type MsgUnlinkNodeResponse struct {
}

func (m *MsgUnlinkNodeResponse) Reset()         { *m = MsgUnlinkNodeResponse{} }
func (m *MsgUnlinkNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnlinkNodeResponse) ProtoMessage()    {}
func (*MsgUnlinkNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{8}
}
func (m *MsgUnlinkNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlinkNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlinkNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlinkNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlinkNodeResponse.Merge(m, src)
}
func (m *MsgUnlinkNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlinkNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlinkNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlinkNodeResponse proto.InternalMessageInfo

type MsgUpdatePlanStatusResponse struct {
}

func (m *MsgUpdatePlanStatusResponse) Reset()         { *m = MsgUpdatePlanStatusResponse{} }
func (m *MsgUpdatePlanStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePlanStatusResponse) ProtoMessage()    {}
func (*MsgUpdatePlanStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{9}
}
func (m *MsgUpdatePlanStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePlanStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePlanStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePlanStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePlanStatusResponse.Merge(m, src)
}
func (m *MsgUpdatePlanStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePlanStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePlanStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePlanStatusResponse proto.InternalMessageInfo

type MsgStartSessionResponse struct {
	ID uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgStartSessionResponse) Reset()         { *m = MsgStartSessionResponse{} }
func (m *MsgStartSessionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartSessionResponse) ProtoMessage()    {}
func (*MsgStartSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{10}
}
func (m *MsgStartSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartSessionResponse.Merge(m, src)
}
func (m *MsgStartSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartSessionResponse proto.InternalMessageInfo

type MsgStartSubscriptionResponse struct {
	ID uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgStartSubscriptionResponse) Reset()         { *m = MsgStartSubscriptionResponse{} }
func (m *MsgStartSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartSubscriptionResponse) ProtoMessage()    {}
func (*MsgStartSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_787060a7dcf174fd, []int{11}
}
func (m *MsgStartSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartSubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartSubscriptionResponse.Merge(m, src)
}
func (m *MsgStartSubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartSubscriptionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreatePlanRequest)(nil), "sentinel.plan.v3.MsgCreatePlanRequest")
	proto.RegisterType((*MsgLinkNodeRequest)(nil), "sentinel.plan.v3.MsgLinkNodeRequest")
	proto.RegisterType((*MsgUnlinkNodeRequest)(nil), "sentinel.plan.v3.MsgUnlinkNodeRequest")
	proto.RegisterType((*MsgUpdatePlanStatusRequest)(nil), "sentinel.plan.v3.MsgUpdatePlanStatusRequest")
	proto.RegisterType((*MsgStartSessionRequest)(nil), "sentinel.plan.v3.MsgStartSessionRequest")
	proto.RegisterType((*MsgStartSubscriptionRequest)(nil), "sentinel.plan.v3.MsgStartSubscriptionRequest")
	proto.RegisterType((*MsgCreatePlanResponse)(nil), "sentinel.plan.v3.MsgCreatePlanResponse")
	proto.RegisterType((*MsgLinkNodeResponse)(nil), "sentinel.plan.v3.MsgLinkNodeResponse")
	proto.RegisterType((*MsgUnlinkNodeResponse)(nil), "sentinel.plan.v3.MsgUnlinkNodeResponse")
	proto.RegisterType((*MsgUpdatePlanStatusResponse)(nil), "sentinel.plan.v3.MsgUpdatePlanStatusResponse")
	proto.RegisterType((*MsgStartSessionResponse)(nil), "sentinel.plan.v3.MsgStartSessionResponse")
	proto.RegisterType((*MsgStartSubscriptionResponse)(nil), "sentinel.plan.v3.MsgStartSubscriptionResponse")
}

func init() { proto.RegisterFile("sentinel/plan/v3/msg.proto", fileDescriptor_787060a7dcf174fd) }

var fileDescriptor_787060a7dcf174fd = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcb, 0x6e, 0x13, 0x3d,
	0x14, 0xce, 0xa4, 0x69, 0xd4, 0xba, 0xff, 0x05, 0x99, 0x5e, 0xd2, 0xa1, 0x4c, 0x42, 0xc4, 0x25,
	0x48, 0xc4, 0x26, 0x09, 0x62, 0x8b, 0x48, 0xbb, 0x41, 0xa2, 0x08, 0x4d, 0x05, 0x8b, 0x6e, 0x60,
	0x2e, 0xce, 0xd4, 0x6a, 0x32, 0x0e, 0x63, 0x4f, 0xa0, 0x42, 0xbc, 0x03, 0x4b, 0x24, 0x5e, 0x00,
	0xf1, 0x24, 0x5d, 0x76, 0xc9, 0xaa, 0x85, 0x74, 0xcf, 0x2b, 0x80, 0xc6, 0x76, 0xd2, 0x36, 0x33,
	0xbd, 0xa8, 0x12, 0xac, 0xc6, 0x63, 0x9f, 0xf3, 0x7d, 0xe7, 0x7c, 0xe7, 0x1c, 0x1b, 0x98, 0x9c,
	0x84, 0x82, 0x86, 0xa4, 0x8b, 0xfb, 0x5d, 0x27, 0xc4, 0x83, 0x16, 0xee, 0xf1, 0x00, 0xf5, 0x23,
	0x26, 0x18, 0xbc, 0x32, 0x3a, 0x43, 0xc9, 0x19, 0x1a, 0xb4, 0x4c, 0xcb, 0x63, 0xbc, 0xc7, 0x38,
	0x76, 0x1d, 0x4e, 0xf0, 0xa0, 0xe1, 0x12, 0xe1, 0x34, 0xb0, 0xc7, 0x68, 0xa8, 0x3c, 0xcc, 0xf9,
	0x80, 0x05, 0x4c, 0x2e, 0x71, 0xb2, 0xd2, 0xbb, 0x56, 0xc0, 0x58, 0xd0, 0x25, 0x58, 0xfe, 0xb9,
	0x71, 0x07, 0xfb, 0x71, 0xe4, 0x08, 0xca, 0x46, 0x5e, 0xd6, 0x38, 0x06, 0xb1, 0xd3, 0x27, 0x1c,
	0x0f, 0x1a, 0x98, 0x0b, 0x47, 0xc4, 0x5c, 0x9d, 0x57, 0x7f, 0x1a, 0x60, 0x7e, 0x9d, 0x07, 0xab,
	0x11, 0x71, 0x04, 0x79, 0xde, 0x75, 0x42, 0x9b, 0xbc, 0x89, 0x09, 0x17, 0x10, 0x82, 0x42, 0x27,
	0x62, 0xbd, 0x92, 0x51, 0x31, 0x6a, 0xb3, 0xb6, 0x5c, 0xc3, 0x47, 0x60, 0x66, 0x04, 0x5f, 0xca,
	0x57, 0x8c, 0xda, 0x5c, 0x73, 0x19, 0x29, 0x7e, 0x34, 0xe2, 0x47, 0x6b, 0xda, 0xa0, 0x3d, 0xb3,
	0xbb, 0x5f, 0xce, 0x7d, 0x3a, 0x28, 0x1b, 0xf6, 0xd8, 0x09, 0xae, 0x80, 0xd9, 0x80, 0x06, 0x8e,
	0xbb, 0x23, 0x08, 0x2f, 0x4d, 0x55, 0x8c, 0xda, 0x94, 0x7d, 0xb4, 0x01, 0x3d, 0x50, 0xec, 0x47,
	0xd4, 0x23, 0xbc, 0x54, 0xa8, 0x4c, 0x49, 0x70, 0x25, 0x09, 0x4a, 0x24, 0x41, 0x5a, 0x12, 0xb4,
	0xca, 0x68, 0xd8, 0xbe, 0x9f, 0x80, 0x7f, 0x3d, 0x28, 0xd7, 0x02, 0x2a, 0xb6, 0x62, 0x17, 0x79,
	0xac, 0x87, 0xb5, 0x7e, 0xea, 0x53, 0xe7, 0xfe, 0xb6, 0x4a, 0x59, 0x3a, 0x70, 0x5b, 0x43, 0x57,
	0x3d, 0x00, 0xd7, 0x79, 0xf0, 0x94, 0x86, 0xdb, 0xcf, 0x98, 0x4f, 0xce, 0xca, 0x76, 0x11, 0xe4,
	0xa9, 0x2f, 0xf3, 0x2c, 0xb4, 0x8b, 0xc3, 0xfd, 0x72, 0xfe, 0xc9, 0x9a, 0x9d, 0xa7, 0x3e, 0xbc,
	0x01, 0xfe, 0x09, 0x99, 0x4f, 0x5e, 0x39, 0xbe, 0x1f, 0x11, 0xae, 0xf2, 0x98, 0xb5, 0xe7, 0x92,
	0xbd, 0xc7, 0x6a, 0xab, 0x4a, 0xa4, 0xa8, 0x2f, 0xc2, 0xee, 0x9f, 0xa5, 0x79, 0x0f, 0xcc, 0x84,
	0xa6, 0xef, 0xeb, 0xda, 0x6d, 0xc8, 0xca, 0x5e, 0x86, 0xac, 0x01, 0x8a, 0xaa, 0x2d, 0x24, 0xcd,
	0x7f, 0xcd, 0x65, 0x34, 0xee, 0x4f, 0x25, 0xe2, 0xa0, 0x81, 0x34, 0xba, 0x36, 0xac, 0x7e, 0x36,
	0xc0, 0xe2, 0x3a, 0x0f, 0x36, 0x84, 0x13, 0x89, 0x0d, 0xc2, 0x39, 0x65, 0xe1, 0x65, 0x98, 0xe7,
	0xc1, 0xb4, 0x4f, 0x42, 0xd6, 0xd3, 0xf9, 0xa9, 0x9f, 0xa4, 0x51, 0x22, 0x12, 0x92, 0xb7, 0x8e,
	0xdb, 0x25, 0xa5, 0x42, 0xc5, 0xa8, 0xcd, 0xd8, 0x47, 0x1b, 0x29, 0x69, 0xa6, 0xd3, 0xd2, 0x7c,
	0x00, 0xd7, 0xc6, 0xc1, 0xc5, 0x2e, 0xf7, 0x22, 0xda, 0x17, 0x7f, 0x2f, 0xc2, 0x2a, 0x06, 0x0b,
	0x13, 0x53, 0xc5, 0xfb, 0x2c, 0xe4, 0x44, 0x93, 0x18, 0x93, 0x24, 0xd5, 0x05, 0x70, 0xf5, 0x44,
	0x5b, 0x2a, 0xf3, 0xea, 0x92, 0xc4, 0x39, 0xde, 0x48, 0xfa, 0xe0, 0xba, 0xcc, 0x2f, 0x5d, 0x7a,
	0x7d, 0xdc, 0x00, 0x4b, 0xa9, 0xda, 0x9c, 0x13, 0xc1, 0x43, 0xb0, 0x92, 0xad, 0xd8, 0xd9, 0x7e,
	0xcd, 0x5f, 0x05, 0x00, 0x12, 0x47, 0x12, 0x0d, 0xa8, 0x47, 0xe0, 0x6b, 0xf0, 0xef, 0x89, 0xcc,
	0xe1, 0x6d, 0x34, 0x79, 0xd5, 0xa1, 0xac, 0x0b, 0xc7, 0xbc, 0x73, 0xae, 0x9d, 0x0e, 0x64, 0x13,
	0xcc, 0x1d, 0x93, 0x0a, 0xde, 0xcc, 0xf4, 0x9b, 0x18, 0x70, 0xf3, 0xd6, 0x39, 0x56, 0x1a, 0x5b,
	0x45, 0x7f, 0xa4, 0xf7, 0x29, 0xd1, 0xa7, 0x26, 0xfb, 0x94, 0xe8, 0xd3, 0x85, 0x83, 0x91, 0x2c,
	0xf4, 0x64, 0xe1, 0xe0, 0xbd, 0x6c, 0xff, 0xec, 0xd1, 0x36, 0xeb, 0x17, 0xb4, 0xd6, 0x9c, 0x1d,
	0xf0, 0xff, 0x44, 0x37, 0xc0, 0x5a, 0x26, 0x42, 0xc6, 0x30, 0x9b, 0x77, 0x2f, 0x60, 0xa9, 0x79,
	0x62, 0x79, 0xed, 0xa5, 0x5a, 0x08, 0xd6, 0xcf, 0x80, 0x48, 0x0f, 0xa7, 0x89, 0x2e, 0x6a, 0xae,
	0x68, 0xdb, 0x2f, 0x77, 0x7f, 0x58, 0xb9, 0x2f, 0x43, 0x2b, 0xb7, 0x3b, 0xb4, 0x8c, 0xbd, 0xa1,
	0x65, 0x7c, 0x1f, 0x5a, 0xc6, 0xc7, 0x43, 0x2b, 0xb7, 0x77, 0x68, 0xe5, 0xbe, 0x1d, 0x5a, 0xb9,
	0xcd, 0x07, 0xc7, 0x9e, 0x89, 0x11, 0x76, 0x9d, 0x75, 0x3a, 0xd4, 0xa3, 0x4e, 0x17, 0x6f, 0xc5,
	0x2e, 0x1e, 0x34, 0x9a, 0xf8, 0x9d, 0x7a, 0xa7, 0xf5, 0x43, 0xd9, 0x72, 0x8b, 0xf2, 0x51, 0x6b,
	0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xb0, 0xfe, 0x5b, 0xc8, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	MsgCreatePlan(ctx context.Context, in *MsgCreatePlanRequest, opts ...grpc.CallOption) (*MsgCreatePlanResponse, error)
	MsgLinkNode(ctx context.Context, in *MsgLinkNodeRequest, opts ...grpc.CallOption) (*MsgLinkNodeResponse, error)
	MsgUnlinkNode(ctx context.Context, in *MsgUnlinkNodeRequest, opts ...grpc.CallOption) (*MsgUnlinkNodeResponse, error)
	MsgUpdatePlanStatus(ctx context.Context, in *MsgUpdatePlanStatusRequest, opts ...grpc.CallOption) (*MsgUpdatePlanStatusResponse, error)
	MsgStartSession(ctx context.Context, in *MsgStartSessionRequest, opts ...grpc.CallOption) (*MsgStartSessionResponse, error)
	MsgStartSubscription(ctx context.Context, in *MsgStartSubscriptionRequest, opts ...grpc.CallOption) (*MsgStartSubscriptionResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) MsgCreatePlan(ctx context.Context, in *MsgCreatePlanRequest, opts ...grpc.CallOption) (*MsgCreatePlanResponse, error) {
	out := new(MsgCreatePlanResponse)
	err := c.cc.Invoke(ctx, "/sentinel.plan.v3.MsgService/MsgCreatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgLinkNode(ctx context.Context, in *MsgLinkNodeRequest, opts ...grpc.CallOption) (*MsgLinkNodeResponse, error) {
	out := new(MsgLinkNodeResponse)
	err := c.cc.Invoke(ctx, "/sentinel.plan.v3.MsgService/MsgLinkNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgUnlinkNode(ctx context.Context, in *MsgUnlinkNodeRequest, opts ...grpc.CallOption) (*MsgUnlinkNodeResponse, error) {
	out := new(MsgUnlinkNodeResponse)
	err := c.cc.Invoke(ctx, "/sentinel.plan.v3.MsgService/MsgUnlinkNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgUpdatePlanStatus(ctx context.Context, in *MsgUpdatePlanStatusRequest, opts ...grpc.CallOption) (*MsgUpdatePlanStatusResponse, error) {
	out := new(MsgUpdatePlanStatusResponse)
	err := c.cc.Invoke(ctx, "/sentinel.plan.v3.MsgService/MsgUpdatePlanStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgStartSession(ctx context.Context, in *MsgStartSessionRequest, opts ...grpc.CallOption) (*MsgStartSessionResponse, error) {
	out := new(MsgStartSessionResponse)
	err := c.cc.Invoke(ctx, "/sentinel.plan.v3.MsgService/MsgStartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgStartSubscription(ctx context.Context, in *MsgStartSubscriptionRequest, opts ...grpc.CallOption) (*MsgStartSubscriptionResponse, error) {
	out := new(MsgStartSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/sentinel.plan.v3.MsgService/MsgStartSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	MsgCreatePlan(context.Context, *MsgCreatePlanRequest) (*MsgCreatePlanResponse, error)
	MsgLinkNode(context.Context, *MsgLinkNodeRequest) (*MsgLinkNodeResponse, error)
	MsgUnlinkNode(context.Context, *MsgUnlinkNodeRequest) (*MsgUnlinkNodeResponse, error)
	MsgUpdatePlanStatus(context.Context, *MsgUpdatePlanStatusRequest) (*MsgUpdatePlanStatusResponse, error)
	MsgStartSession(context.Context, *MsgStartSessionRequest) (*MsgStartSessionResponse, error)
	MsgStartSubscription(context.Context, *MsgStartSubscriptionRequest) (*MsgStartSubscriptionResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) MsgCreatePlan(ctx context.Context, req *MsgCreatePlanRequest) (*MsgCreatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgCreatePlan not implemented")
}
func (*UnimplementedMsgServiceServer) MsgLinkNode(ctx context.Context, req *MsgLinkNodeRequest) (*MsgLinkNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgLinkNode not implemented")
}
func (*UnimplementedMsgServiceServer) MsgUnlinkNode(ctx context.Context, req *MsgUnlinkNodeRequest) (*MsgUnlinkNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgUnlinkNode not implemented")
}
func (*UnimplementedMsgServiceServer) MsgUpdatePlanStatus(ctx context.Context, req *MsgUpdatePlanStatusRequest) (*MsgUpdatePlanStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgUpdatePlanStatus not implemented")
}
func (*UnimplementedMsgServiceServer) MsgStartSession(ctx context.Context, req *MsgStartSessionRequest) (*MsgStartSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgStartSession not implemented")
}
func (*UnimplementedMsgServiceServer) MsgStartSubscription(ctx context.Context, req *MsgStartSubscriptionRequest) (*MsgStartSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgStartSubscription not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_MsgCreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgCreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.plan.v3.MsgService/MsgCreatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgCreatePlan(ctx, req.(*MsgCreatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgLinkNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLinkNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgLinkNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.plan.v3.MsgService/MsgLinkNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgLinkNode(ctx, req.(*MsgLinkNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgUnlinkNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnlinkNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgUnlinkNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.plan.v3.MsgService/MsgUnlinkNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgUnlinkNode(ctx, req.(*MsgUnlinkNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgUpdatePlanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePlanStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgUpdatePlanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.plan.v3.MsgService/MsgUpdatePlanStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgUpdatePlanStatus(ctx, req.(*MsgUpdatePlanStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgStartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgStartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.plan.v3.MsgService/MsgStartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgStartSession(ctx, req.(*MsgStartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgStartSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgStartSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.plan.v3.MsgService/MsgStartSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgStartSubscription(ctx, req.(*MsgStartSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sentinel.plan.v3.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MsgCreatePlan",
			Handler:    _MsgService_MsgCreatePlan_Handler,
		},
		{
			MethodName: "MsgLinkNode",
			Handler:    _MsgService_MsgLinkNode_Handler,
		},
		{
			MethodName: "MsgUnlinkNode",
			Handler:    _MsgService_MsgUnlinkNode_Handler,
		},
		{
			MethodName: "MsgUpdatePlanStatus",
			Handler:    _MsgService_MsgUpdatePlanStatus_Handler,
		},
		{
			MethodName: "MsgStartSession",
			Handler:    _MsgService_MsgStartSession_Handler,
		},
		{
			MethodName: "MsgStartSubscription",
			Handler:    _MsgService_MsgStartSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentinel/plan/v3/msg.proto",
}

func (m *MsgCreatePlanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePlanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePlanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Gigabytes != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Gigabytes))
		i--
		dAtA[i] = 0x18
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMsg(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLinkNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLinkNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLinkNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnlinkNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlinkNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlinkNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePlanStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePlanStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePlanStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartSessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Renewable {
		i--
		if m.Renewable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Renewable {
		i--
		if m.Renewable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgLinkNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLinkNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLinkNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnlinkNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlinkNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlinkNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePlanStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePlanStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePlanStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStartSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartSubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartSubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartSubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreatePlanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovMsg(uint64(l))
	if m.Gigabytes != 0 {
		n += 1 + sovMsg(uint64(m.Gigabytes))
	}
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *MsgLinkNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgUnlinkNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgUpdatePlanStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	if m.Status != 0 {
		n += 1 + sovMsg(uint64(m.Status))
	}
	return n
}

func (m *MsgStartSessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Renewable {
		n += 2
	}
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgStartSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Renewable {
		n += 2
	}
	return n
}

func (m *MsgCreatePlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	return n
}

func (m *MsgLinkNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnlinkNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePlanStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStartSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	return n
}

func (m *MsgStartSubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreatePlanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gigabytes", wireType)
			}
			m.Gigabytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gigabytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, types.Coin{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLinkNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLinkNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLinkNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlinkNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlinkNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlinkNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePlanStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePlanStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePlanStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= v1.Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Renewable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Renewable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Renewable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Renewable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLinkNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLinkNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLinkNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlinkNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlinkNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlinkNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePlanStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePlanStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePlanStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartSubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartSubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartSubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
