// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/protorev/v1beta1/query.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetProtoRevPoolRequest struct {
	BaseDenom  string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	OtherDenom string `protobuf:"bytes,2,opt,name=other_denom,json=otherDenom,proto3" json:"other_denom,omitempty" yaml:"other_denom"`
}

func (m *QueryGetProtoRevPoolRequest) Reset()         { *m = QueryGetProtoRevPoolRequest{} }
func (m *QueryGetProtoRevPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevPoolRequest) ProtoMessage()    {}
func (*QueryGetProtoRevPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{0}
}
func (m *QueryGetProtoRevPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevPoolRequest.Merge(m, src)
}
func (m *QueryGetProtoRevPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevPoolRequest proto.InternalMessageInfo

func (m *QueryGetProtoRevPoolRequest) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *QueryGetProtoRevPoolRequest) GetOtherDenom() string {
	if m != nil {
		return m.OtherDenom
	}
	return ""
}

type QueryGetProtoRevPoolResponse struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
}

func (m *QueryGetProtoRevPoolResponse) Reset()         { *m = QueryGetProtoRevPoolResponse{} }
func (m *QueryGetProtoRevPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevPoolResponse) ProtoMessage()    {}
func (*QueryGetProtoRevPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{1}
}
func (m *QueryGetProtoRevPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevPoolResponse.Merge(m, src)
}
func (m *QueryGetProtoRevPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevPoolResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevPoolResponse) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryGetProtoRevPoolRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest")
	proto.RegisterType((*QueryGetProtoRevPoolResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse")
}

func init() {
	proto.RegisterFile("osmosis/protorev/v1beta1/query.proto", fileDescriptor_f5e7ac9973cce389)
}

var fileDescriptor_f5e7ac9973cce389 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0xc3, 0x30,
	0x1c, 0xc7, 0x57, 0x91, 0xc9, 0x22, 0x08, 0x16, 0x95, 0xa1, 0x92, 0x49, 0xf0, 0x20, 0x88, 0x0d,
	0x53, 0x41, 0xf0, 0x38, 0x04, 0x19, 0x5e, 0x66, 0x8f, 0x5e, 0x46, 0xbb, 0xfe, 0xb6, 0x06, 0xda,
	0xfe, 0xba, 0x24, 0x2d, 0xf6, 0x1d, 0x3c, 0xf8, 0x58, 0x1e, 0x77, 0xf4, 0x34, 0x64, 0x7b, 0x83,
	0x3d, 0x81, 0x24, 0xeb, 0x98, 0x07, 0x6f, 0xdf, 0x7f, 0x9f, 0x10, 0x7e, 0xe4, 0x12, 0x55, 0x8a,
	0x4a, 0x28, 0x9e, 0x4b, 0xd4, 0x28, 0xa1, 0xe4, 0x65, 0x37, 0x04, 0x1d, 0x74, 0xf9, 0xb4, 0x00,
	0x59, 0x79, 0x36, 0x76, 0xdb, 0xf5, 0xca, 0xdb, 0xac, 0xbc, 0x7a, 0x75, 0x7a, 0x34, 0xc1, 0x09,
	0xda, 0x94, 0x1b, 0xb5, 0x1e, 0xb0, 0x0f, 0x87, 0x9c, 0xbd, 0x1a, 0xfe, 0x19, 0xf4, 0xc0, 0x24,
	0x3e, 0x94, 0x03, 0xc4, 0xc4, 0x87, 0x69, 0x01, 0x4a, 0xbb, 0xf7, 0x84, 0x84, 0x81, 0x82, 0x61,
	0x04, 0x19, 0xa6, 0x6d, 0xe7, 0xc2, 0xb9, 0x6a, 0xf5, 0x8e, 0x57, 0xf3, 0xce, 0x61, 0x15, 0xa4,
	0xc9, 0x23, 0xdb, 0x76, 0xcc, 0x6f, 0x19, 0xf3, 0x64, 0xb4, 0xfb, 0x40, 0xf6, 0x51, 0xc7, 0x20,
	0x6b, 0x6c, 0xc7, 0x62, 0x27, 0xab, 0x79, 0xc7, 0x5d, 0x63, 0x7f, 0x4a, 0xe6, 0x13, 0xeb, 0x2c,
	0xc8, 0x5e, 0xc8, 0xf9, 0xff, 0xbf, 0x51, 0x39, 0x66, 0x0a, 0xdc, 0x6b, 0xb2, 0x97, 0x23, 0x26,
	0x43, 0x11, 0xd9, 0xbf, 0xec, 0xf6, 0xdc, 0xd5, 0xbc, 0x73, 0xb0, 0x7e, 0xb4, 0x2e, 0x98, 0xdf,
	0x34, 0xaa, 0x1f, 0xf5, 0x46, 0x5f, 0x0b, 0xea, 0xcc, 0x16, 0xd4, 0xf9, 0x59, 0x50, 0xe7, 0x73,
	0x49, 0x1b, 0xb3, 0x25, 0x6d, 0x7c, 0x2f, 0x69, 0xe3, 0xad, 0x3f, 0x11, 0x3a, 0x2e, 0x42, 0x6f,
	0x84, 0x29, 0x57, 0x90, 0x69, 0x91, 0x41, 0x72, 0x83, 0xe3, 0xb1, 0x18, 0x89, 0x20, 0xe1, 0x71,
	0x11, 0xf2, 0xb2, 0x7b, 0xcb, 0x75, 0x2c, 0x64, 0x34, 0xcc, 0x03, 0xa9, 0x2b, 0xbe, 0x39, 0xfe,
	0xfb, 0xf6, 0xfc, 0xba, 0xca, 0x41, 0x85, 0x4d, 0xeb, 0xef, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xb3, 0x3f, 0x9a, 0xef, 0x9f, 0x01, 0x00, 0x00,
}

func (m *QueryGetProtoRevPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OtherDenom) > 0 {
		i -= len(m.OtherDenom)
		copy(dAtA[i:], m.OtherDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OtherDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetProtoRevPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OtherDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtoRevPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetProtoRevPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
